import React, { useEffect, useRef, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import classNames from "classnames";
import classes from "../styles/ChatGrid.module.css";
import { FaJsSquare } from "react-icons/fa";
import { MdDarkMode, MdLightMode } from "react-icons/md";
import Room from "../components/Room";
import Users from "../components/Users";
import UserMessage from "../components/UserMessage";
import TypingLoader from "../components/TypingLoader";
import InputField from "../components/InputField";
import IconButton from "../components/IconButton";
import { useTheme } from "../hooks/useTheme";
import { useAuth } from "../hooks/useAuth";
import { useRouter } from "next/router";
import { useSocket } from "../hooks/useSocket";
import { socket } from "../features/socketSlice";
import { useMessage } from "../hooks/useMessage";
import { useRoom } from "../hooks/useRoom";
import { allRooms } from "../utils/Data";

const Home: NextPage = () => {
  const { isLightTheme, handleSwitchTheme } = useTheme();
  const { user } = useAuth();
  const { selectedRoom } = useRoom();
  const router = useRouter();
  const { connectUser, chatMessages } = useSocket();
  const { message } = useMessage();
  const [isUserTyping, setIsUserTyping] = useState(false);
  const [otherClient, setOtherClient] = useState<string>("");
  const [otherColor, setOtherColor] = useState<string>("");
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // receive typing state from server
  useEffect(() => {
    socket.on("raisingisTypingEvent", ({ user, room, isTyping, color }) => {
      setOtherClient(user);
      setIsUserTyping(isTyping);
      setOtherColor(color);
    });
  }, [message]);

  useEffect(() => {
    if (!user) router.push("/login");
  }, []);

  useEffect(() => {
    if (user) {
      // conncet new user
      connectUser({ user, room: "Shanto's Room" });
    }
  }, [user]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [chatMessages, isUserTyping]);

  if (!user) {
    return null;
  }

  return (
    <>
      <Head>
        <title>Next Boilerplate</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={classes.chat__container}>
        <div
          className={classNames(
            "flex items-center justify-between border-b px-4",
            classes.chat__header
          )}
        >
          <h2 className="text-3xl font-medium"> Group Chat</h2>
          <div>
            <h2 className="text-xl font-medium">
              User : <span> {user} </span>
            </h2>
          </div>
          <IconButton
            icon={isLightTheme ? <MdLightMode /> : <MdDarkMode />}
            text={isLightTheme ? "Light" : "Dark"}
            isRightIcon
            isNoTextInMobile
            onClick={handleSwitchTheme}
          />
        </div>
        <div
          className={classNames(
            "border-r bg-slate-50 flex-col gap-2 ",
            classes.chat__left__bar
          )}
        >
          <div>
            <h2 className="text-xl text-center font-medium px-2 py-1 border-b">
              Available Rooms
            </h2>
          </div>
          {allRooms.map(({ roomName }, index) => (
            <Room roomName={roomName} key={index} />
          ))}
        </div>
        <div
          className={classNames(
            "relative flex flex-col border-r",
            classes.chat__middle__bar
          )}
        >
          <div className="border-b bg-white sticky top-0 p-2">
            <h2 className="text-xl font-medium"> {selectedRoom} </h2>
          </div>
          <div className="flex overflow-y-auto flex-col gap-3 flex-1 p-2">
            {chatMessages.map(({ message, user: currentUser, id, color }) => {
              return (
                <UserMessage
                  isOwn={user === currentUser}
                  messages={message}
                  username={currentUser}
                  color={color}
                  key={id}
                />
              );
            })}
            {isUserTyping && (
              <UserMessage
                isOwn={false}
                messages={<TypingLoader />}
                color={otherColor}
                username={otherClient}
              />
            )}
            <div ref={messagesEndRef} />
          </div>
          <InputField />
        </div>
        <div className={classNames("flex-col", classes.chat__right__bar)}>
          <div className="border-b">
            <h2 className="text-xl text-center font-medium px-2 py-1">
              Online Users
            </h2>
          </div>
          <div className="flex flex-col gap-3 pt-3">
            <Users username="Saiful Islam Shanto" />
            <Users username="Labib" />
            <Users username="Rakibul Hasan" />
          </div>
        </div>
      </div>
    </>
  );
};

export default Home;
